datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

model User {
  id           String                @id
  username     String?               @unique // platform username
  address      String?               @unique // Ethereum wallet address
  email        String?               @unique // Email address
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
  locale       String?
  mfa_enabled  Boolean?
  imageSrc     String?
  country      String?
  banned       Boolean               @default(false)
  blocked      Boolean? // Prevents others from interacting with this person
  betaAccess   Boolean               @default(false)
  refreshToken String?
  accessToken  String?
  OAuth        OAuth[]
  clients      ClientsOnDevelopers[]
}

model OAuth {
  state         String   @id
  codeChallenge String
  codeVerifier  String
  createdAt     DateTime @default(now())
  user          User?    @relation(fields: [userId], references: [id])
  userId        String?
}

model Client {
  id           String                @id
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
  developers   ClientsOnDevelopers[]
  redirectUrls String
  clientSecret String?
  accessToken  String
  refreshToken String
  deleted      Boolean               @default(false) // Owner has deleted the client
  paused       Boolean               @default(false) // Rate-limiting or other security concern
}

model ClientsOnDevelopers {
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  user        User              @relation(fields: [userId], references: [id])
  client      Client            @relation(fields: [clientId], references: [id])
  userId      String
  clientId    String
  accessLevel ClientPermissions

  @@id([userId, clientId])
}

enum ClientPermissions {
  OWNER
  EDITOR
}
